#!/usr/bin/env bash

# Enable strict error handling
set -euo pipefail

# ANSI color codes
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to get branch status relative to its upstream
get_branch_status() {
  local local_branch=$1
  local upstream_branch=$2
  local local_hash=$3
  local upstream_hash=$4
  local merge_base=$5

  if [ "${local_hash}" = "${upstream_hash}" ]; then
    echo "UP-TO-DATE"
  elif [ "${merge_base}" = "${local_hash}" ]; then
    echo "CAN_FF"
  else
    echo "DIVERGED"
  fi
}

# Function to update branch to upstream
update_branch() {
  local local_branch=$1
  local upstream_branch=$2
  local upstream_hash=$3
  local is_current=$4
  local is_worktree=$5

  if [ -n "${is_current}" ]; then
    # For current branch, use git merge --ff-only for safety
    if git merge --ff-only "${upstream_branch}" > /dev/null 2>&1; then
      echo "MERGED"
    else
      echo "ERROR"
    fi
  elif [ -n "${is_worktree}" ]; then
    # Skip branches checked out in other worktrees
    echo "SKIPPED"
  else
    # For non-checked-out branches, update the ref directly
    git update-ref "refs/heads/${local_branch}" "${upstream_hash}"
    echo "FF"
  fi
}

# Function to colorize status output
colorize_status() {
  local status=$1
  case "${status}" in
    "UP-TO-DATE") echo -e "${GREEN}${status}${NC}" ;;
    "MERGED"|"FF") echo -e "${BLUE}${status}${NC}" ;;
    "SKIPPED"|"DIVERGED") echo -e "${YELLOW}${status}${NC}" ;;
    "ERROR") echo -e "${RED}${status}${NC}" ;;
    *) echo "${status}" ;;
  esac
}

# 1. Fetch from all remotes
echo "Fetching all remotes..."
git fetch --all

# Get current branch
if [[ "$(git rev-parse --symbolic-full-name HEAD 2>/dev/null)" == refs/heads/* ]]; then
  CURRENT_BRANCH=$(git symbolic-ref --short HEAD)
else
  CURRENT_BRANCH="(detached HEAD)"
fi
echo "Current branch: ${CURRENT_BRANCH}"

# Get list of branches checked out in any worktree
echo "Checking for branches checked out in worktrees..."
CHECKED_OUT_BRANCHES=$(git worktree list --porcelain | { grep "^branch" || true; } | sed 's/branch //' | sed 's/refs\/heads\///')

echo -e "\nAttempting to fast-forward branches with upstreams:\n"
printf "%-30s %-30s %-20s\n" "BRANCH" "UPSTREAM" "RESULT"
printf "%-30s %-30s %-20s\n" "------" "--------" "------"

# 2 & 3. For all branches with upstreams (including current), try fast-forwarding
git for-each-ref --format="%(refname:short) %(upstream:short)" refs/heads/ | while read -r local_branch upstream_branch; do
  # Skip if no upstream is set
  if [ -z "${upstream_branch}" ]; then
    continue
  fi

  # Skip if the upstream does not exist
  if ! git show-ref --verify --quiet "refs/remotes/${upstream_branch}"; then
    continue
  fi
  
  # Check if this branch is checked out anywhere
  if [ "${local_branch}" = "${CURRENT_BRANCH}" ]; then
    is_worktree=
    is_current=1
  elif echo "${CHECKED_OUT_BRANCHES}" | grep -q "^${local_branch}$"; then
    is_current=
    is_worktree=1
  else
    is_current=
    is_worktree=
  fi
  
  # Check if fast-forward is possible by comparing the commit hashes
  LOCAL_HASH=$(git rev-parse "${local_branch}")
  UPSTREAM_HASH=$(git rev-parse "${upstream_branch}")
  MERGE_BASE=$(git merge-base "${local_branch}" "${upstream_branch}")
  
  # Get initial status
  STATUS=$(get_branch_status "${local_branch}" "${upstream_branch}" "${LOCAL_HASH}" "${UPSTREAM_HASH}" "${MERGE_BASE}")
  
  # Update branch if possible
  if [ "${STATUS}" = "CAN_FF" ]; then
    STATUS=$(update_branch "${local_branch}" "${upstream_branch}" "${UPSTREAM_HASH}" "${is_current}" "${is_worktree}")
  fi
  
  # 4. Print the report with colors
  branch_text="${local_branch}"
  if [ -n "${is_current}" ]; then
    branch_text+=" (current)"
  elif [ -n "${is_worktree}" ]; then
    branch_text+=" (worktree)"
  fi
  printf "%-30s %-30s %-20s\n" "${branch_text}" "${upstream_branch}" "$(colorize_status "${STATUS}")"
done
