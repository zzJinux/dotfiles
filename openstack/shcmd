#!/usr/bin/env bash
alias os=openstack

_openstack_locate_config() {
  local cfg
  for cfg in ./clouds.yaml ~/.config/openstack/clouds.yaml /etc/openstack/clouds.yaml ''; do
    if [ -f "$cfg" ]; then
      break
    fi
  done
  if [ -z "$cfg" ]; then
    echo "No clouds.yaml found" >&2
    return 1
  fi
  echo "$cfg"
}

_openstack_find_cloud() {
  local cfg
  cfg=$(_openstack_locate_config)
  if [ -z "$cfg" ]; then
    return 1
  fi
  if ! yq '.clouds|keys|.[]' "$cfg" | grep -qE "^${1}$"; then
    echo "No such cloud: $1" >&2
    return 1
  fi
  echo "$cfg"
}

osc() {
  if ! _openstack_find_cloud >/dev/null "$1"; then
    return 1
  fi

  local k
  for k in $(awk 'BEGIN{for(v in ENVIRON) print v}' | grep '^OS_'); do
    eval "export ${k}="
  done
  export OS_CLOUD="$1"
}

osce() {
  local cfg
  if ! cfg=$(_openstack_find_cloud "$1"); then
    return 1
  fi

  local clouds_path="$cfg"
  local secure_path="${cfg/clouds.yaml/secure.yaml}"
  local configconv=~/.config/openstack/configconv
  local cloud_name="$1"

  local IFS=$'\n'
  local envs=( $(cat <(<"$clouds_path" "$configconv" "$cloud_name") <(<"$secure_path" "$configconv" "$cloud_name")) )
  local env
  for env in "${envs[@]}"; do
    export "$env"
  done
  if [ -n "$OS_TOKEN" ]; then
    export OS_AUTH_TOKEN="$OS_TOKEN"
  fi
  export OS_IDENTITY_API_VERSION=3
  export OS_OS_AUTH_VERSION=3
  export OS_CLOUD=
  # export OS_CLOUD_NAME="$cloud_name"
}

ostok() {
  local token project_id
  read -d '' token project_id < <(openstack token issue -c id -c project_id -f value)
  export OS_TOKEN="$token" OS_AUTH_TOKEN="$token" OS_PROJECT_ID="$project_id" PROJECT_ID="$project_id"
  echo "Token: $token"
  echo "Project ID: $project_id"
  if [ "$1" = copy ]; then
    printf "%s" "$token" | pbcopy
  fi
}

osreset() {
  local prefix="OS_"
  local name _

  # List and obliterate environment variables with the given prefix
  while IFS='=' read -r name _; do
    if [[ $name == $prefix* ]]; then
      unset "$name"
    fi
  done < <(env)
}
