#!/usr/bin/env bash
alias kl='kubectl'
complete -F _complete_alias kl

kx() {
  local cluster=$1
  local namespace=${2:-}

  if [ -z "$cluster" ]; then
    echo "Usage: kx CLUSTER [NAMESPACE]"
    return 1
  fi

  config_path=~/.kube/clusters/"$cluster"/config
  env_path=~/.kube/clusters/"$cluster"/env

  if ! [ -r "$config_path" ]; then 
    echo "Cluster $cluster not found"
    return 1
  fi

  if [ "${KUBECONFIG-}" == "" ]; then
    export KUBECONFIG="$TMPDIR/$SHELL_SESSION_ID.kubeconfig"
  fi
  cp "$config_path" "$KUBECONFIG"

  if [ -r "$env_path" ]; then
    local line
    while read -r line; do
      export "$line"
    done <"$env_path"
  else
    echo "Warning: env file not found for cluster $cluster"
  fi

  local kubectl_comp=~/.kube/clusters/"$cluster"/kubectl-completion.bash
  if ! [ -r "$kubectl_comp" ]; then
    kubectl completion bash > "$kubectl_comp"
  fi
  source "$kubectl_comp"
  local helm_comp=~/.kube/clusters/"$cluster"/helm-completion.bash
  if ! [ -r "$helm_comp" ]; then
    helm completion bash > "$helm_comp"
  fi
  source "$helm_comp"

  if [ -n "$namespace" ]; then
    kubectl config set-context --current --namespace="$namespace"
  fi
}

kn () {
  if [ -z "${1-}" ]; then
    echo "Usage: kn NAMESPACE"
    return 1
  fi
  if [ -z "${KUBECONFIG-}" ]; then
    echo "Session KUBECONFIG not set: run kx first"
    return 1
  fi
  kubectl config set-context --current --namespace="$1"
}

kpf() {
  eval "$(< ~/.kube/portforwards/"$1" sed 's/^/local /')"
  portforward-forever "$cluster" "$namespace" "$listen_addr" "$listen_port" "$target" "$target_port"
}

kjmp() {
  eval "$(< ~/.kube/jumpremotes/"$1" sed 's/^/local /')"
  REGISTRY_MIRROR_PREFIX=$REGISTRY_MIRROR_PREFIX kubejump \
    "$cluster" "$namespace" "$local_addr" "$local_port" "$remote_host" "$remote_port"
}

# kube-ps1
source "${HOMEBREW_PREFIX}/opt/kube-ps1/share/kube-ps1.sh"
#shellcheck disable=SC2034
KUBE_PS1_SYMBOL_ENABLE=false # https://github.com/jonmosco/kube-ps1#customization
