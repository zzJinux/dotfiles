#!/usr/bin/env bash
cobra_complete kubectl
alias k=kubectl

ktx() {
  local cluster=$1
  local namespace=${2:-}
  local config_path env_path

  if [ -z "$cluster" ]; then
    echo "ktx switches the current kubectl context to the specified cluster"
    echo
    echo "Usage: "
    echo "  ktx CLUSTER [NAMESPACE]"
    return 1
  fi

  config_path=~/.kube/clusters/"$cluster"/config
  env_path=~/.kube/clusters/"$cluster"/env

  if ! [ -r "$config_path" ]; then
    echo "Cluster $cluster not found"
    return 1
  fi

  if [ "${KUBECONFIG-}" = "" ]; then
    export KUBECONFIG="$TMPDIR/$SHELL_SESSION_ID.kubeconfig"
  fi
  cp "$config_path" "$KUBECONFIG"

  if [ -r "$env_path" ]; then
    local line
    while read -r line; do
      export "$line"
    done <"$env_path"
  else
    echo "Warning: env file not found for cluster $cluster"
  fi

  if [ -n "$namespace" ]; then
    kubectl config set-context --current --namespace="$namespace"
  fi
}

_fzf_complete_ktx() {
  stdin_fzf_completer context 2 "$@" \
    < <(find -L ~/.kube/clusters -mindepth 1 -maxdepth 1 -type d -exec basename '{}' \;)
}

kns() {
  if [ -z "${1-}" ]; then
    echo "kns switches the current kubectl namespace"
    echo
    echo "Usage: "
    echo "  kns NAMESPACE"
    return 1
  fi
  if [ -z "${KUBECONFIG-}" ]; then
    echo "Session KUBECONFIG not set: run ktx first"
    return 1
  fi
  kubectl config set-context --current --namespace="$1"
}

# TODO: namespaces completion

kpf() {
  if [ -z "${1-}" ]; then
    echo "kpf forwards a local port to the TARGET as indefinitely as possible"
    echo "A TARGET represensts a forwarding config file ~/.kube/portforwards/TARGET"
    echo
    echo "Usage: "
    echo "  kpf TARGET"
    return 1
  fi
  eval "$(<~/.kube/portforwards/"$1" sed 's/^/local /')"
  portforward-forever "$cluster" "$namespace" "$listen_addr" "$listen_port" "$target" "$target_port"
}

_fzf_complete_kpf() {
  stdin_fzf_completer target 2 "$@" \
    < <(builtin cd ~/.kube/portforwards && find -L . -type f | cut -c3-)
}


kjmp() {
  if [ -z "${1-}" ]; then
    echo "kjmp forwards a local port to a remote host"
    echo "A TARGET represensts a forwarding config file ~/.kube/jumpremotes/TARGET"
    echo
    echo "Usage: "
    echo "  kjmp TARGET"
    return 1
  fi
  eval "$(<~/.kube/jumpremotes/"$1" sed 's/^/local /')"
  REGISTRY_MIRROR_PREFIX=$REGISTRY_MIRROR_PREFIX kubejump \
    "$cluster" "$namespace" "$local_addr" "$local_port" "$remote_host" "$remote_port"
}

_fzf_complete_kjmp() {
  stdin_fzf_completer target 2 "$@" \
    < <(builtin cd ~/.kube/jumpremotes && find -L . -type f | cut -c3-)
}

staticfile_complete k8scmds "$DOTFILES/kubernetes/completion.bash" ktx kns kpf kjmp
